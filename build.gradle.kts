/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    `java-library`
    `maven-publish`
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        url = uri("https://hub.spigotmc.org/nexus/content/groups/public/")
    }
    maven {
        url = uri("https://jitpack.io/")
    }
    maven {
        url = uri("https://raw.github.com/Sidpatchy/MCShared/mvn-repo/")
    }
    maven {
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    api(libs.net.kyori.adventure.api)
    api(libs.net.kyori.adventure.text.minimessage)
    api(libs.net.kyori.adventure.platform.bukkit)
    api(libs.com.hm.mcshared.mcshared)
    compileOnly(libs.io.papermc.paper.api)
    compileOnly(libs.net.milkbowl.vault.vaultapi)
    compileOnly(libs.com.github.decentsoftware.eu.decentholograms)
}

group = "com.hm"
version = "1.13.0"
description = "PetMaster"
java.sourceCompatibility = JavaVersion.VERSION_17

// Define project properties for resource processing
val projectName = "PetMaster"
val projectGroupId = "com.hm"
val projectArtifactId = "petmaster"
val projectDescription = "PetMaster"
val projectUrl = "https://github.com/your-username/PetMaster" // Update with your actual URL

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

// Process resources to replace variables in plugin.yml
tasks.processResources {
    val properties = mapOf(
        "project" to mapOf(
            "name" to projectName,
            "groupId" to projectGroupId,
            "artifactId" to projectArtifactId,
            "version" to version,
            "description" to projectDescription,
            "url" to projectUrl
        )
    )
    
    filesMatching("plugin.yml") {
        expand(properties)
    }
}

// Configure Shadow plugin to create a fat JAR with dependencies
tasks.shadowJar {
    archiveClassifier.set("")
    archiveBaseName.set("petmaster")
    archiveVersion.set(version.toString())
    
    // Relocate MCShared to avoid conflicts, but exclude event classes
    relocate("com.hm.mcshared", "com.hm.petmaster") {
        exclude("com.hm.mcshared.event.*")
    }
    
    // Include all dependencies
    configurations = listOf(project.configurations.runtimeClasspath.get())
}

// Make shadowJar the default jar task
tasks.jar {
    enabled = false
}

// Make build depend on shadowJar instead of jar
tasks.build {
    dependsOn(tasks.shadowJar)
}
